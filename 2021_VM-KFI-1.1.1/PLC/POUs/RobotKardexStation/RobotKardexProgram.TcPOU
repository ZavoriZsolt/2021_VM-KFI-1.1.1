<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="RobotKardexProgram" Id="{cc68026a-f56f-401e-9b75-d372b8e011fb}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM RobotKardexProgram
VAR	(* Control *)
	nState						: UDINT;
	nStatePrevious				: UDINT;
	sState						: STRING(500);
	bError						: BOOL;
	fbCycleTime					: TON;
	nCycleTime					: REAL;
END_VAR
VAR (* Interlock *)
	bInterlock_Strip1			: BOOL;
	bInterlock_Strip2			: BOOL;
	bInterlock_Strip3			: BOOL;
END_VAR
VAR CONSTANT
	iLastStatesMax				: INT := 500;
END_VAR
VAR //LastStates
	anLastStates				:ARRAY[0..iLastStatesMax] OF UDINT;
    iLastStates					:INT;
END_VAR
VAR (* Robot *)
	fbRobot						: FB_Fanuc_Kardex;
	arRobotEvents				: ARRAY [0..15] OF TcEventEntry;
END_VAR
VAR (* Test variables *)
	nOverride					: BYTE := 10;
	nProgNr						: UINT;
	nWeight						: UINT;
	nErrorId					: UDINT;
//	ePath						: E_CNC_Robot_Path;
END_VAR
VAR // MySQL
	
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[MySQL();

(*Error handling*)
IF nState > 0 AND nState < 150000 THEN
	nStatePrevious := nState;
END_IF

(*Maintance*)
IF bManualMode THEN
	nState := 150000;
END_IF

(*Emergency*)
IF NOT i_bLO1_Main THEN
	nState := 0;
END_IF

(*Last states*)
IF(nState >= 1000) AND (nState < 150000) THEN
(*Steps before any state*)
	IF anLastStates[0] <> nState THEN
		FOR iLastStates:=iLastStatesMax TO 1 BY -1 DO
			anLastStates[iLastStates]:= anLastStates[iLastStates-1];
		END_FOR
		anLastStates[0]:= nState;
	END_IF
END_IF	

IF fbRobot.bError
THEN
	bError  :=  TRUE;
END_IF



CASE nState OF
{region "Alaphelyzet felvétel"}
	(****************************************************************************************)
	(******************************* Alaphelyzetfelvétel ************************************)
	(****************************************************************************************)	
	0:		(*-----=== Kimenetek törlése ===-----*)
		sState := CONCAT(UDINT_TO_STRING(nState) ,' - A biztonsági kör nem aktív');
		bInterlock_Strip1 := TRUE;
		bInterlock_Strip2 := TRUE;
		bInterlock_Strip3 := TRUE;
		IF i_bLO1_Main AND NOT bManualMode AND NOT fbRobot.bPendantMode THEN
			nState := nState + 20;
		END_IF

	20: 
		sState := CONCAT(UDINT_TO_STRING(nState) ,' - Robot alaphelyzetfelvétel');
		fbRobot.eCommand := E_Kardex_Robot_Command.Home;
		IF NOT fbRobot.bBusy AND fbRobot.bReady THEN
			fbRobot.eCommand := E_CNC_Robot_Command.NoCommand;
			bInterlock_Strip1 := FALSE;
			bInterlock_Strip2 := FALSE;
			bInterlock_Strip3 := FALSE;
			nState := nState + 20;
		END_IF
	
	40:
		sState := CONCAT(UDINT_TO_STRING(nState) ,' - Robot megfogó ellenőrzése');
		IF fbRobot.bPartPresent THEN
			nState := 30000;						// Van darab a robotnál -> le kell tenni
		ELSE
			nState := nState + 20;
		END_IF
	
	60:
		nState := 10000;
{endregion}
		
{region "Alaphelyzet"}
	(****************************************************************************************)
	(*********************************** Alaphelyzet ****************************************)
	(****************************************************************************************)	
	10000:		(* -----=== Várakozás parancsra ===----- *)
		sState := CONCAT(UDINT_TO_STRING(nState) ,' - Alaphelyzet');
		IF fbS32.bPalletAtStopper THEN
			bInterlock_Strip1 := TRUE;
			nState := 20000;
		END_IF
{endregion}

{region "bepakolás a CNC-be"}
	(****************************************************************************************)
	(************************** Felső pálya -> Alsó pálya ***********************************)
	(****************************************************************************************)
	20000:		(*-----=== Paletta felvétele felső pályáról ===-----*)
		sState := CONCAT(UDINT_TO_STRING(nState) ,' - Robot felső pálya felvétel');
		fbRobot.nStripNumber := 1;
		fbRobot.eCommand := E_Kardex_Robot_Command.Pick_Up_Strip;
		IF fbRobot.bBusy THEN
			nState := nState + 20;
		END_IF
		
	20020:		(*-----=== Várakozás Robotmozgásra ===-----*)
		sState := CONCAT(UDINT_TO_STRING(nState) ,' - Várakozáas robot mozgásra');
		IF NOT fbRobot.bBusy THEN
			fbRobot.eCommand := E_Kardex_Robot_Command.NoCommand;
			bInterlock_Strip3 := TRUE;
			nState := 30000;
		END_IF
	
	30000:		(*-----=== Várakozás lerakási engedélyre ===-----*)
		sState := CONCAT(UDINT_TO_STRING(nState) ,' - Várakozáas robot mozgásra');
		IF NOT fbS23.i_bPalettSensor AND NOT fbs22.bPalletSent THEN
			nState := nState + 20;
		END_IF
	
	30020:
		bInterlock_Strip1 := FALSE;
		nState := 40000;
	
	40000:		(*-----=== Paletta lerakása alsó pályára ===-----*)
		sState := CONCAT(UDINT_TO_STRING(nState) ,' - Robot alsó pálya lerakás');
		fbRobot.nStripNumber := 3;
		fbRobot.eCommand := E_Kardex_Robot_Command.Put_Down_Strip;
		IF fbRobot.bBusy THEN
			nState := nState + 20;
		END_IF
		
	40020:		(*-----=== Várakozás Robotmozgásra ===-----*)
		sState := CONCAT(UDINT_TO_STRING(nState) ,' - Várakozáas robot mozgásra');
		IF NOT fbRobot.bBusy THEN
			fbRobot.eCommand := E_Kardex_Robot_Command.NoCommand;
			bInterlock_Strip3 := FALSE;
			nState := 50000;
		END_IF
	
	50000:
		nState := 10000;
	
	150000: (* Maintenance *)
		sState := CONCAT(UDINT_TO_STRING(nState) ,' - Maintenance');
		IF NOT bManualMode THEN
			nState := 0;
		END_IF
		
	200000:(* Error handling *)
		sState := CONCAT(UDINT_TO_STRING(nState) ,CONCAT(' - Error, from this state: ' , sState));
		nState := 200020;
	
	200020:(* Error handling *)
		IF bAckP THEN
			CASE nStatePrevious OF
				0..9999: nState := 0;
//				10000..25000: nState := 10000;
//				30000..31000: nState := 30000;
			ELSE nState := 0;
			END_CASE
		END_IF	
		
	ELSE //Not a real step, for test purposes
		sState := CONCAT(UDINT_TO_STRING(nState) ,' - Not a real step, for test purposes');
END_CASE

(*Timers***************************************************)
fbCycleTime(IN:= nState > 10000 AND nState <= 95000, PT:= T#1D, Q=> , ET=> );
IF nState > 10000 AND nState <= 95000 THEN
	nCycleTime := TIME_TO_REAL(fbCycleTime.ET)/1000;
END_IF

Robot();]]></ST>
    </Implementation>
    <Action Name="MySQL" Id="{e216ed4a-b7b7-4bac-8f87-348bd4b73c03}">
      <Implementation>
        <ST><![CDATA[;]]></ST>
      </Implementation>
    </Action>
    <Action Name="Robot" Id="{1185e4b4-e518-46c7-bf42-9394e4cd0956}">
      <Implementation>
        <ST><![CDATA[arRobotEvents[0] := TC_EVENTS.MyEvents.RobotNoPneumaticsErr;
arRobotEvents[1] := TC_EVENTS.MyEvents.RobotNotCorrectPrgErr;
arRobotEvents[2] := TC_EVENTS.MyEvents.RobotNotProdOnRobotErr;
arRobotEvents[3] := TC_EVENTS.MyEvents.RobotProdOnRobotErr;
arRobotEvents[4] := TC_EVENTS.MyEvents.RobotGripperOpenErr;
arRobotEvents[5] := TC_EVENTS.MyEvents.RobotGripperCloseErr;
arRobotEvents[6] := TC_EVENTS.MyEvents.RobotNotCorrectViseNumberErr;
arRobotEvents[7] := TC_EVENTS.MyEvents.RobotNotReadyErr;
arRobotEvents[8] := TC_EVENTS.MyEvents.RobotBasePosErr;


(*-----=== Hand shake jelek kezelése ===-----*)
fbRobot.bKardex_Reset := fbRobot.bKardex_Set;							// 05.1	Robot Kardex-be menne
fbRobot.bHolder_Reset := fbRobot.bHolder_Set;							// 05.1	Robot Kardex-be menne
fbRobot.bMir_Reset := fbRobot.bMir_Set;									// 05.1	Robot Kardex-be menne
fbRobot.bStrip_1_Reset := fbRobot.bStrip_1_Set;							// 05.1	Robot Kardex-be menne
fbRobot.bStrip_2_Reset := fbRobot.bStrip_2_Set;							// 05.1	Robot Kardex-be menne
fbRobot.bStrip_3_Reset := fbRobot.bStrip_3_Set;							// 05.1	Robot Kardex-be menne


fbRobot(
	sName:= 'Fanuc - Kardex', 
	bEn:= i_bLO2_Main, 
	timeBaseState:= T#40S, 
	bAck:= bAckP, 
	bOverride:= nOverride, 
	stEventArray:= arRobotEvents);]]></ST>
      </Implementation>
    </Action>
  </POU>
</TcPlcObject>