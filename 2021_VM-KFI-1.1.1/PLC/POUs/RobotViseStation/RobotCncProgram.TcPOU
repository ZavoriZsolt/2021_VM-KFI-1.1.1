<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="RobotCncProgram" Id="{eed2e4c0-ad68-465b-86ac-58c9189ec973}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM RobotCncProgram
VAR	(* Control *)
	nState						:UDINT;
	nStatePrevious				:UDINT;
	sState						:STRING(500);
	fbCycleTime					:TON;
	nCycleTime					:REAL;
	bError						:	BOOL;
	bInit						:	BOOL := TRUE;
END_VAR
VAR //LastStates
	anLastStates				:ARRAY[0..500] OF UDINT;
    iLastStates					:INT;
END_VAR
VAR (* Robot *)
	fbRobot				: FB_Fanuc;
	arRobotEvents		: ARRAY [0..11] OF TcEventEntry;
END_VAR
VAR	(**)
	
END_VAR
VAR (* Test variables *)
	nOverride			: BYTE := 10;
	bTestEnable			: BOOL;
	nTestIndex			: BYTE;
	nTestCncIndex		: BYTE;
END_VAR
VAR // MySQL
	fbUpdateVise			: FB_SP_spUpdateVise;
	stParameterValues		: ST_ParaVal_UpdateVise;
	fbGetNextVise			: FB_SP_spGetNextVise;
END_VAR
VAR	(*Vise Status handling*)
	i							:	BYTE;
	nUsedViseIndex				:	BYTE;
	nUsedCNC					:	BYTE := 5;
	bActualCNCThreadDone		:	BOOL;
	bActualCNCThreadInBase		:	BOOL;
	bActualCNCProgramNotRunning	:	BOOL;
	nNumberOfEmptyViseSockets	:	BYTE;
	nIndexOfTheEmptySocket		:	BYTE;
END_VAR
VAR (* OPC_UA CNC4*)
	stCNC5_Data					: 	POINTER TO OPC_CNC_Data_Collection;
	tCNC5HeartBeatDelay			: 	TON;
	bCNC5ProgramNotRunning		:	BOOL;
	bCNC5ProgramRunning			:	BOOL;
	bCNC5ServerRunning			:	BOOL;
	bCNC5SystemReady			:	BOOL;
	bCNC5Finished				:	BOOL;
	bCNC5HandshakeTimeout		:	BOOL;
	tCNC5HandshakeTimer			:	TON;
	bCNC5MidwareShutdownPossible	: 	BOOL;	//12500, 14000, cnc4 = 0 or cnc4 >= 50000
	bCNC5ShutdownIsProcessing		:	BOOL;
	
	bOverrideCNC5ProgramUse		:	BOOL := TRUE;
	
	(*CNC 5 Thread State Machine process*)
	nStateCNC5					:	UDINT;
	nStatePreviousCNC5			:	UDINT;
	sStateCNC5					:	STRING(500);
	fbCycleTimeCNC5				:	TON;
	nCycleTimeCNC5				:	REAL;
	bErrorCNC5					:	BOOL;
	bStepEnableCNC5				:	BOOL;
	anLastStatesCNC5			:	ARRAY[0..100] OF UDINT;
    iLastStatesCNC5				:	INT;
	
	//Vise / Term90 / TErm92 / 66.6, 66.7, 67.0 zár-nyit-lefúj
END_VAR
VAR PERSISTENT 
	nRackUsedForCNC4			:	INT;
	nRackUsedForCNC5			:	INT;
	bRobotGoneTowait			:	BOOL;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF bInit THEN
	FOR i := 1 TO 14 BY 1 DO
		aViseStatus[i].eSocketState := E_ViseSocketState.ViseInSocket;
	END_FOR
	bInit := FALSE;
END_IF


(* =================================== OPC_UA Hearbeat handling =========================================== *)
stCNC5_Data := ADR(OPC_UA_CNC5);
tCNC5HeartBeatDelay(IN := stCNC5_Data^.HeartBeat = 99, PT := T#500MS, Q=>);
IF tCNC5HeartBeatDelay.Q THEN
	stCNC5_Data^.HeartBeat := 0;
END_IF

tCNC5HandshakeTimer(	IN := (stCNC5_Data^.HeartBeat = 0),
						PT := T#3S,
						Q=> bCNC5HandshakeTimeout);
					
(* =================================== OPC_UA Automatic Shutdown handling =========================================== *)					
bCNC5MidwareShutdownPossible := 	nState <= 11000;
								
IF bCNC5MidwareShutdownPossible AND stCNC5_Data^.MidwareRequestedShutdown AND (NOT bCNC5HandshakeTimeout) THEN
	stCNC5_Data^.ApproveShutdownRequest := TRUE;
END_IF

IF stCNC5_Data^.ApproveShutdownRequest THEN
	IF bCNC5HandshakeTimeout THEN
		bCNC5ShutdownIsProcessing := TRUE;
	END_IF
END_IF

IF bCNC5ShutdownIsProcessing THEN
	stCNC5_Data^.ApproveShutdownRequest := FALSE;
	stCNC5_Data^.MidwareRequestedShutdown := FALSE;
	IF (NOT bCNC5HandshakeTimeout) THEN
		bCNC5ShutdownIsProcessing := FALSE;
	END_IF
END_IF
					

(* =================================== Error handling ===================================*)
IF nState > 0 AND nState < 150000 THEN
	nStatePrevious := nState;
END_IF

(* =================================== Maintance =================================== *)
IF bManualModeVise THEN
	nState := 150000;
	nStateCNC5 := 150000;
END_IF


(* =================================== Emergency =================================== *)
IF NOT i_bLO1_CNC45 OR NOT i_bLO2_CNC45 THEN
	nState := 0;
	nStateCNC5 := 0;
END_IF

(* =================================== Last states =================================== *)
IF(nState >= 1000) AND (nState < 150000) THEN
(*Steps before any state*)
	IF anLastStates[0] <> nState THEN
		FOR iLastStates:=500 TO 1 BY -1 DO
			anLastStates[iLastStates]:= anLastStates[iLastStates-1];
		END_FOR
		anLastStates[0]:= nState;
	END_IF
END_IF	

(* =================================== Check common CNC states ===================================*)
bCNC5ProgramNotRunning := stCNC5_Data^.CurentState_Program = 'Idle' OR stCNC5_Data^.CurentState_Program = 'NotSelected' OR stCNC5_Data^.CurentState_Program = 'Interrupted';
bCNC5ProgramRunning := stCNC5_Data^.CurentState_Program = 'Running';
bCNC5ServerRunning := stCNC5_Data^.ServerState = 'Running';
bCNC5SystemReady := stCNC5_Data^.ServerState = 'Running' AND stCNC5_Data^.CurrentState_State = 'NCIsAvailable';
bCNC5Finished := stCNC5_Data^.CurentState_Program = 'Finished';

bStepEnableCNC5 := bStepEnableViseStation;

CASE nUsedCNC OF
	4:
		//Not yet available
	5:
		bActualCNCThreadDone := nStateCNC5 = 50000;
		bActualCNCThreadInBase := nStateCNC5 = 0;
		bActualCNCProgramNotRunning := bCNC5ProgramNotRunning;
END_CASE


(* =================================== Error cases ===================================*)
IF 	fbrobot.bError OR
	stCNC5_Data^.ControlStatus_Error OR
	(NOT bCNC5SystemReady) OR
	(NOT bCNC5ServerRunning) OR 
	(bCNC5HandshakeTimeout AND (NOT bCNC5ShutdownIsProcessing)) OR
	bErrorCNC5
THEN	
	bError := TRUE;
END_IF



(* =================================== Cycle time ===================================*)
fbCycleTime(IN:= nState > 11000 AND nState <= 95000, PT:= T#1D, Q=> , ET=> );
IF nState > 10000 AND nState <= 95000 THEN
	nCycleTime := TIME_TO_REAL(fbCycleTime.ET)/1000;
END_IF


MySQL();
CNC5Thread();
Robot();

(*============================================================================================================================================*)
CASE nState OF
	(* Emergency circuit broken - Base state *)
	0:(* Operation stop - Emergency circuit check *)
		sState := CONCAT(UDINT_TO_STRING(nState) ,' - A biztonsági kör nem aktív');
		
		fbRobot.eCommand := E_Robot_Command.NoCommand;
		fbRobot.nViseNumber := 0;
		fbRobot.nCncNumber := 0;
		
		stCNC5_Data^.DoorControl_CloseDoor := FALSE;
		stCNC5_Data^.DoorControl_OpenDoor := FALSE;
		stCNC5_Data^.MagazineTable_Trigger := FALSE;
		stCNC5_Data^.ToolTable_Trigger := FALSE;
		stCNC5_Data^.M401_Acknowledge := FALSE;
		stCNC5_Data^.M402_Acknowledge := FALSE;
		stCNC5_Data^.M403_Acknowledge := FALSE;
		stCNC5_Data^.StartCNCProgram := FALSE;
		stCNC5_Data^.StopCNCProgram := FALSE;
		stCNC5_Data^.CancelCNCProgram := FALSE;
		stCNC5_Data^.SelectCNCProgramByNodeID := FALSE;
		stCNC5_Data^.SelectCNCPrograBlockNumber := FALSE;
		stCNC5_Data^.ToolTableLoadTrigger := FALSE;
		stCNC5_Data^.MagazineTableLoadTrigger := FALSE;
		stCNC5_Data^.ProgramLoadTrigger := FALSE;
		
		GVL_IO.q_bCNC4_Fix_Vise := TRUE;
		GVL_IO.q_bCNC4_Release_Vise := FALSE;
		bRobotGoneTowait := FALSE;
		
		IF i_bLO1_CNC45 AND i_bLO2_CNC45 AND (NOT bManualModeVise) AND (NOT bError) THEN
			IF bStepEnableViseStation THEN
				nState := nState + 20;
			END_IF
		END_IF

	20: 
		sState := CONCAT(UDINT_TO_STRING(nState) ,' - Robot alaphelyzetfelvétel');
		fbRobot.eCommand := E_Robot_Command.Home;
		IF NOT fbRobot.bBusy AND fbRobot.bReady THEN
			IF bStepEnableViseStation THEN
				fbRobot.eCommand := E_Robot_Command.NoCommand;
				nState := nState + 20;
			END_IF
		END_IF

	40:
		nState := 100;
		
	100:		(*-----=== CNC ellenőrzés ===-----*)
		sState := CONCAT(UDINT_TO_STRING(nState) ,' - A CNC 5 ellenőrzése');
		IF stCNC5_Data^.ServerState = 'Running' AND
		   stCNC5_Data^.CurrentState_State = 'NCIsAvailable' THEN
				IF stCNC5_Data^.CurentState_Program = 'Running' THEN
					IF bStepEnableViseStation THEN
						nState := 11700;										// A megmunkálás folyamatban -> Várakozás megmunkálás végére.
					END_IF
				ELSIF	stCNC5_Data^.CurentState_Program = 'Idle' OR stCNC5_Data^.CurentState_Program = 'NotSelected' OR stCNC5_Data^.CurentState_Program = 'Interrupted' THEN
					IF stDutData_Cnc1.nDutId > 0 AND stDutData_Cnc1.bDone THEN 
						IF bStepEnableViseStation THEN									// Késztermék a satuban
							nState := 120;
						END_IF
					ELSE
						IF bStepEnableViseStation THEN									// A satu üres
							nState := 120;
						END_IF
					END_IF
				END_IF
		END_IF

	120:		(*-----=== CNC ajtó nnyitása ===-----*)
		sState := CONCAT(UDINT_TO_STRING(nState) ,' - A 5.CNC ajtó nyitása');
		
		stCNC5_Data^.DoorControl_OpenDoor := TRUE;
		IF stCNC5_Data^.DoorControl_DoorOpened THEN
			IF bStepEnableViseStation THEN	
				stCNC5_Data^.DoorControl_OpenDoor := FALSE;
				nState := 500;
			END_IF
		END_IF
		
	500:
		IF bStepEnableViseStation THEN
			nState := 11000;
		END_IF

	(*Check for next possible process *)	
	11000:
		sState := CONCAT(UDINT_TO_STRING(nState) ,' - Következő folyamatra várakozás');
	
		(*Currently (2023.11.09) Only CNC 5 is available. This way, CNC is constantly 5 yet*)
		nUsedCNC := 5;
		
		IF fbRobot.RobotIn.Status.bVisePresent THEN
			nState  := 11500;
		ELSIF stCNC5_Data^.ApproveShutdownRequest THEN
			nState  := 11010;
		(*Check if there is a Ready to CNC Vise *)
		ELSIF (CheckForViseStatus(E_Vise_State.ReadyToCnc) >= ViseProgram.nStartIndex) AND (CheckForViseStatus(E_Vise_State.ReadyToCnc) <= ViseProgram.nMaxIndex) AND (CheckForViseStatus(E_Vise_State.CncDone) = 99) AND (CheckForViseStatus(E_Vise_State.ReadyToCnc) <> 99) THEN
			
			nUsedViseIndex := CheckForViseStatus(E_Vise_State.ReadyToCnc);
			
			CASE nUsedCNC OF
				4: nRackUsedForCNC4 := nUsedViseIndex;
				5: nRackUsedForCNC5 := nUsedViseIndex;
				ELSE ; (*Else is not relevant in this case, because of the pre-condition*)
			END_CASE
		
			IF bActualCNCProgramNotRunning AND (bActualCNCThreadInBase) THEN
				IF (CheckForViseStatus(E_Vise_State.InCnc) = 99) AND (CheckForViseStatus(E_Vise_State.CncDone) = 99) AND (CheckForUsedCNCByVise(nUsedCNC) <> nUsedCNC) THEN	//No vise with CncDone and InCNC Status in the requested CNC
					IF CheckAllViseInSafePos() THEN
						IF (NOT fbRobot.bBusy) THEN
							bRobotGoneTowait := FALSE;
							nState := 12000;	//Pick vise from socket, put into CNC
						END_IF
					END_IF
				END_IF
			END_IF
		
			
		ELSIF (CheckForViseStatus(E_Vise_State.CncDone) >= ViseProgram.nStartIndex) AND (CheckForViseStatus(E_Vise_State.CncDone) <= ViseProgram.nMaxIndex) AND (CheckForViseStatus(E_Vise_State.CncDone) <> 99) THEN
			
			nUsedViseIndex := CheckForViseStatus(E_Vise_State.CncDone);
		
			CASE nUsedCNC OF
				4: nRackUsedForCNC4 := nUsedViseIndex;
				5: nRackUsedForCNC5 := nUsedViseIndex;
				ELSE ; (*Else is not relevant in this case, because of the pre-condition*)
			END_CASE

			IF (bActualCNCThreadDone) THEN
				IF CheckAllViseInSafePos() THEN
					IF (NOT fbRobot.bBusy) THEN
						bRobotGoneTowait := FALSE;
						nState := 14000;	//Pick vise from CNC, Put it to its socket
					END_IF
				END_IF
			END_IF
		//If none of the above ran, then send the robot to Wait pos (Prg2)
		ELSIF (NOT fbRobot.bBusy) AND (NOT bRobotGoneTowait) THEN
			nState := 16000;
		END_IF
		
	(*Wait for CNC to finish shutdown*)		
	11010:
		sState := CONCAT(UDINT_TO_STRING(nState) ,' - Waiting for OPC midware to restart');
	 	IF (NOT bCNC5HandshakeTimeout) AND (NOT bCNC5ShutdownIsProcessing) THEN
			nState := 11000;
		END_IF
	
	11500:
		sState := CONCAT(UDINT_TO_STRING(nState) ,' - Robot megfogóban satu van. Üres satu foglalatok ellenőrzése');	
		
		FOR i := ViseProgram.nStartIndex TO ViseProgram.nMaxIndex BY 1 DO 
			IF aViseStatus[i].eSocketState = E_ViseSocketState.SocketEmpty THEN
				nNumberOfEmptyViseSockets := nNumberOfEmptyViseSockets + 1;
			END_IF
		END_FOR
		nState  := nState + 20;
		
	11520:
		IF nNumberOfEmptyViseSockets = 1 THEN
			FOR i := ViseProgram.nStartIndex TO ViseProgram.nMaxIndex BY 1 DO 
				IF aViseStatus[i].eSocketState = E_ViseSocketState.SocketEmpty THEN
					sState := CONCAT(UDINT_TO_STRING(nState) , CONCAT(' - Üres satu foglalat található a ' , CONCAT( BYTE_TO_STRING(i),' indexű helyen')));	
					nIndexOfTheEmptySocket := i;
					EXIT;
				END_IF
			END_FOR
		ELSIF nNumberOfEmptyViseSockets = 0 THEN
			sState := CONCAT(UDINT_TO_STRING(nState) ,' - Nem található üres satu foglalat. Rakassa le a robottal a satut.');
			nState := 11521;	
		ELSE
			sState := CONCAT(UDINT_TO_STRING(nState) ,' - Több üres foglalat található. Rakassa le a robottal a satut.');
		END_IF 
		
		nState := nState + 20;
		
	11540:
		//Innen egyelőre kézzel lép tovább
		
	11560:
		sState := CONCAT(UDINT_TO_STRING(nState) , CONCAT(' - Robot satu visszarakás erre a satu foglalatra ', BYTE_TO_STRING(nIndexOfTheEmptySocket)));
		
		fbRobot.nViseNumber := nUsedViseIndex;
		fbRobot.nCncNumber := nUsedCNC;
		fbRobot.eCommand := E_Robot_Command.Put_Down_Vise;
		
		IF fbRobot.bBusy THEN
			nState := 11580;
		END_IF
		
	11580:
		sState := CONCAT(UDINT_TO_STRING(nState) ,' - Várakozás robot satu visszarakásra');
		
		IF (NOT fbRobot.bBusy) THEN
			nState := 11600;
		END_IF
		
	11600:
		nState := 11000;
		
	11700:
		sState := CONCAT(UDINT_TO_STRING(nState) ,' - CNC program befejezésre várakozás');	
		
		
	(*Pick vise from requested rack, and place it into the requested CNC*)
	12000:
		sState := CONCAT(UDINT_TO_STRING(nState) ,' - Robot alaphelyzetfelvétel');
		
		fbRobot.eCommand := E_Robot_Command.Home;
		
		IF fbRobot.bBusy THEN
			nState := 12005;
		END_IF
		
	12005:
		sState := CONCAT(UDINT_TO_STRING(nState) ,' - Robot alaphelyzetre mozgásra vár');
		
		IF (NOT fbRobot.bBusy) THEN
			fbRobot.eCommand := E_Robot_Command.NoCommand;
			IF bStepEnableViseStation THEN
				nState := 12010;
			END_IF
		END_IF
		
	12010:
		sState := CONCAT(UDINT_TO_STRING(nState) ,' - Kért satu henger munkahelyzetre');
		
		fbViseStation[nUsedViseIndex].Vise.bBasePosCmd := FALSE;
		fbViseStation[nUsedViseIndex].Vise.bWorkPosCmd := TRUE;
		
		IF fbViseStation[nUsedViseIndex].Vise.bWorkPosStab THEN
			IF bStepEnableViseStation THEN
				nState := nState + 10;
			END_IF
		END_IF
		
	12020:
		sState := CONCAT(UDINT_TO_STRING(nState) ,' - Robot betöltő állomásról satu felvételre indul');
		
		fbRobot.nViseNumber := nUsedViseIndex;
		fbRobot.nCncNumber := nUsedCNC;
		fbRobot.eCommand := E_Robot_Command.Pick_Up_Vise;
		
		IF fbRobot.bBusy THEN
			nState := 12080;
		END_IF
		
	12080:
		sState := CONCAT(UDINT_TO_STRING(nState) ,' - Várakozás robotprogram végére');
		
		IF (NOT fbRobot.bBusy) THEN
			IF bStepEnableViseStation THEN
				fbViseStation[nUsedViseIndex].Vise.bWorkPosCmd := FALSE;
				aViseStatus[nUsedViseIndex].eState := E_Vise_State.InRobotArmBeforeCnc;
				aViseStatus[nUsedViseIndex].eSocketState := E_ViseSocketState.SocketEmpty;
				fbRobot.eCommand := E_Robot_Command.NoCommand;
				nState := 12100;
			END_IF
		END_IF
		
	12100:
		sState := CONCAT(UDINT_TO_STRING(nState) ,' - Kért satu henger alaphelyzetre');
		
		fbViseStation[nUsedViseIndex].Vise.bBasePosCmd := TRUE;
		fbViseStation[nUsedViseIndex].Vise.bWorkPosCmd := FALSE;
		
		IF fbViseStation[nUsedViseIndex].Vise.bBasePosStab THEN
			IF bStepEnableViseStation THEN
				nState := 12500;
			END_IF
		END_IF
		
		
	12500:	
		sState := CONCAT(UDINT_TO_STRING(nState) ,' - CNC ajtó nyitott állapot ellenőrzés , Satu fixer elenged');
		
		CASE nUsedCNC OF
			4:
				//Not yet available
			5:
				GVL_IO.q_bCNC4_Fix_Vise := FALSE;
				GVL_IO.q_bCNC4_Release_Vise := TRUE;
				IF CheckAndOpenCNCDoor(5) THEN
					IF bStepEnableViseStation THEN
						nState := nState + 20;
					END_IF
				END_IF
		END_CASE
		
	12520:
		sState := CONCAT(UDINT_TO_STRING(nState) ,' - Robot CNC-be satu berakásra indul');
		
		fbRobot.nViseNumber := nUsedViseIndex;
		fbRobot.nCncNumber := nUsedCNC;
		fbRobot.eCommand := E_Robot_Command.Put_Down_Cnc;
		
		IF fbRobot.bBusy THEN
			nState := 12580;
		END_IF
		
	12580:
		sState := CONCAT(UDINT_TO_STRING(nState) ,' - Várakozás robotprogram végére, Satu fixer rögzít');
		
		IF (NOT fbRobot.bBusy) THEN
			
			aViseStatus[nUsedViseIndex].eState := E_Vise_State.InCnc;
			aViseStatus[nUsedViseIndex].nInCNC := nUsedCNC;
			fbRobot.eCommand := E_Robot_Command.NoCommand;
			
			CASE nUsedCNC OF
				4:
					//Not yet available
				5:
					GVL_IO.q_bCNC4_Fix_Vise := TRUE;
					GVL_IO.q_bCNC4_Release_Vise := FALSE;	
			END_CASE
			
			IF bStepEnableViseStation THEN
				nState := nState + 20;
			END_IF
		END_IF
		
	12600:
		sState := CONCAT(UDINT_TO_STRING(nState) ,' - Robot WAIT pozícióra indul');
		
		fbRobot.nViseNumber := nUsedViseIndex;
		fbRobot.nCncNumber := nUsedCNC;
		fbRobot.eCommand := E_Robot_Command.Wait;
		
		IF fbRobot.bBusy THEN
			nState := nState + 20;
		END_IF
		
	12620:
		sState := CONCAT(UDINT_TO_STRING(nState) ,' - Robot WAIT pozícióra várakozás');
	
		IF (NOT fbRobot.bBusy) THEN
			
			fbRobot.eCommand := E_Robot_Command.NoCommand;
			
			IF bStepEnableViseStation THEN
				IF (NOT bOverrideCNC5ProgramUse) THEN
					nState := nState + 20;
				ELSE
					nState := 13000;
				END_IF
			END_IF
		END_IF
		
	12640:
		sState := CONCAT(UDINT_TO_STRING(nState) ,' - CNC állapotgép indítása');
		
		CASE nUsedCNC OF
			4:
				//Not yet available
			5:
				IF (NOT bErrorCNC5) THEN
					IF bStepEnableViseStation THEN
						nStateCNC5 := 1000;
						nState := nState + 20;
					END_IF
				END_IF
		END_CASE
		
		
	12660:
		sState := CONCAT(UDINT_TO_STRING(nState) ,' - CNC állapotgép indulás ellenőrzés');
		
		CASE nUsedCNC OF
			4:
				//Not yet available				
			5:
				IF (NOT bErrorCNC5) THEN
					IF nStateCNC5 > 1000 THEN
						nState := 13000;
					END_IF
				END_IF
		END_CASE
		
		
	13000:
		sState := CONCAT(UDINT_TO_STRING(nState) ,' - CNC állapotgép elindult. Vissza várakozó helyzetbe!');
		(*CNC Started. Go to base pos, check if put-in needed, or finished.*)
		IF bStepEnableViseStation THEN
			nState := 11000;
		END_IF
	
	
		
	
	
	(*Pick vise from requested CNC, and place it into the requested rack*)
	14000:
		sState := CONCAT(UDINT_TO_STRING(nState) ,' - Robot alaphelyzetfelvétel');
		
		fbRobot.eCommand := E_Robot_Command.Home;
		
		IF fbRobot.bBusy THEN
			nState := 14005;
		END_IF
		
	14005:
		sState := CONCAT(UDINT_TO_STRING(nState) ,' - Robot alaphelyzetre mozgásra vár');
		
		IF (NOT fbRobot.bBusy) THEN
			fbRobot.eCommand := E_Robot_Command.NoCommand;
			IF bStepEnableViseStation THEN
				nState := 14010;
			END_IF
		END_IF
		
	14010:	
		sState := CONCAT(UDINT_TO_STRING(nState) ,' - CNC ajtó nyitott állapot ellenőrzés , Satu fixer elenged');
		
		CASE nUsedCNC OF
			4:
				//Not yet available
			5:
				nStateCNC5 := 0;
				GVL_IO.q_bCNC4_Fix_Vise := FALSE;
				GVL_IO.q_bCNC4_Release_Vise := TRUE;
				IF CheckAndOpenCNCDoor(5) THEN
					IF bStepEnableViseStation THEN
						nState := nState + 10;
					END_IF
				END_IF
		END_CASE
		
	14020:
		sState := CONCAT(UDINT_TO_STRING(nState) ,' - Robot CNC-ből satu kivétel indul');
		
		fbRobot.nViseNumber := nUsedViseIndex;
		fbRobot.nCncNumber := nUsedCNC;
		fbRobot.eCommand := E_Robot_Command.Pick_Up_Cnc;
		
		IF fbRobot.bBusy THEN
			nState := 14080;
		END_IF
		
	14080:
		sState := CONCAT(UDINT_TO_STRING(nState) ,' - Várakozás robotprogram végére, Satu fixer rögzít');
		
		IF (NOT fbRobot.bBusy) THEN
			
			aViseStatus[nUsedViseIndex].eState := E_Vise_State.InRobotArmAfterCnc;
			aViseStatus[nUsedViseIndex].nInCNC := 0;
			fbRobot.eCommand := E_Robot_Command.NoCommand;
			
			CASE nUsedCNC OF
				4:
					//Not yet available					
				5:
					GVL_IO.q_bCNC4_Fix_Vise := TRUE;
					GVL_IO.q_bCNC4_Release_Vise := FALSE;
					IF bStepEnableViseStation THEN
						nState := 14500;
					END_IF
			END_CASE
		END_IF
		
	14500:
		sState := CONCAT(UDINT_TO_STRING(nState) ,' - Kért satu henger munkahelyzetre');
		
		fbViseStation[nUsedViseIndex].Vise.bBasePosCmd := FALSE;
		fbViseStation[nUsedViseIndex].Vise.bWorkPosCmd := TRUE;
		
		IF fbViseStation[nUsedViseIndex].Vise.bWorkPosStab THEN
			IF bStepEnableViseStation THEN
				nState := nState + 20;
			END_IF
		END_IF
		
	14520:
		sState := CONCAT(UDINT_TO_STRING(nState) ,' - Robot CNCből satu kivétel után betöltő állomásra indul');
		
		fbRobot.nViseNumber := nUsedViseIndex;
		fbRobot.nCncNumber := nUsedCNC;
		fbRobot.eCommand := E_Robot_Command.Put_Down_Vise;
		
		IF fbRobot.bBusy THEN
			nState := 14580;
		END_IF
		
	14580:
		sState := CONCAT(UDINT_TO_STRING(nState) ,' - Várakozás robotprogram végére');
		
		IF (NOT fbRobot.bBusy) THEN
			
			fbViseStation[nUsedViseIndex].Vise.bWorkPosCmd := FALSE;
			aViseStatus[nUsedViseIndex].eState := E_Vise_State.OutForUnload;
			aViseStatus[nUsedViseIndex].eSocketState := E_ViseSocketState.ViseInSocket;
			fbRobot.eCommand := E_Robot_Command.NoCommand;
			
			IF bStepEnableViseStation THEN
				nState := 14600;
			END_IF
		END_IF
		
	14600:
		sState := CONCAT(UDINT_TO_STRING(nState) ,' - Kért satu henger alaphelyzetre');
		
		fbViseStation[nUsedViseIndex].Vise.bBasePosCmd := TRUE;
		fbViseStation[nUsedViseIndex].Vise.bWorkPosCmd := FALSE;
		
		IF fbViseStation[nUsedViseIndex].Vise.bBasePosStab THEN
			IF bStepEnableViseStation THEN
				nState := 15000;
			END_IF
		END_IF
		
		
	15000:
		sState := CONCAT(UDINT_TO_STRING(nState) ,' - Satu előkészítő állomásra visszarakás kész');	
		
		IF bStepEnableViseStation THEN
			nState := 11000;
		END_IF
		
		
	(*No process requested. Send the robot to park*)
	16000:
		sState := CONCAT(UDINT_TO_STRING(nState) ,' - Várakozás hogy robot ne legyen Busy');	
		
		IF (NOT fbRobot.bBusy) THEN
			IF bStepEnableViseStation THEN
				nState := nState + 20;
			END_IF
		END_IF
		
	16020:
		sState := CONCAT(UDINT_TO_STRING(nState) ,' - Robot WAIT pozícióra indul');
		
		fbRobot.eCommand := E_Robot_Command.Wait;
		
		IF fbRobot.bBusy THEN
			nState := nState + 20;
		END_IF
		
	16040:
		sState := CONCAT(UDINT_TO_STRING(nState) ,' - Robot WAIT pozícióra várakozás');
	
		IF (NOT fbRobot.bBusy) THEN
			
			fbRobot.eCommand := E_Robot_Command.NoCommand;
			bRobotGoneTowait := TRUE;
			
			IF bStepEnableViseStation THEN
				nState := 11000;
			END_IF
		END_IF
	
	150000: (* Maintenance *)
		sState := CONCAT(UDINT_TO_STRING(nState) ,' - Maintenance');
		IF NOT bManualModeVise THEN
			nState := 0;
		END_IF
		
	200000:(* Error handling *)
		sState := CONCAT(UDINT_TO_STRING(nState) ,CONCAT(' - Error, from this state: ' , sState));
		nState := 200020;

	200020:(* Error handling *)
		IF bAckP THEN
			CASE nStatePrevious OF
				0..9999: nState := 0;
				10000..25000: nState := 10000;
				30000..31000: nState := 30000;
			ELSE nState := 0;
			END_CASE
		END_IF	
		
	ELSE //Not a real step, for test purposes
		sState := CONCAT(UDINT_TO_STRING(nState) ,' - Not a real step, for test purposes');
END_CASE]]></ST>
    </Implementation>
    <Method Name="CheckAllViseInSafePos" Id="{28343d95-4132-48b2-90d9-64484e0fd07b}">
      <Declaration><![CDATA[METHOD INTERNAL CheckAllViseInSafePos : BOOL
VAR
	i	:	INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[(*Check if all Vises ar in base position*)

FOR i := ViseProgram.nStartIndex TO ViseProgram.nMaxIndex BY 1 DO
	IF (NOT fbViseStation[i].Vise.bBasePosStab) THEN
		CheckAllViseInSafePos := FALSE;
		RETURN;
	END_IF
END_FOR

CheckAllViseInSafePos := TRUE;
RETURN;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckAndOpenCNCDoor" Id="{024f57ef-fce2-4739-b1eb-5997ae4ba83d}">
      <Declaration><![CDATA[METHOD INTERNAL CheckAndOpenCNCDoor : BOOL
VAR_INPUT
	nActualCNC	:	BYTE;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
CASE nActualCNC OF
	4:
		//Not yet available
	5:
		IF stCNC5_Data^.DoorControl_DoorOpened THEN
			CheckAndOpenCNCDoor := TRUE;
			RETURN;
		ELSE
			stCNC5_Data^.DoorControl_OpenDoor := TRUE;
			IF stCNC5_Data^.DoorControl_DoorOpened THEN
				IF bStepEnable THEN	
					stCNC5_Data^.DoorControl_OpenDoor := FALSE;
					CheckAndOpenCNCDoor := TRUE;
					RETURN;
				END_IF
			END_IF
		END_IF
		
END_CASE
]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckForUsedCNCByVise" Id="{2068fda5-f055-4319-aafb-8d4f8c07cd3c}">
      <Declaration><![CDATA[METHOD INTERNAL CheckForUsedCNCByVise : BYTE
VAR_INPUT
	nCncUsed		:	BYTE;
END_VAR
VAR
	i					:	BYTE;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR i := ViseProgram.nStartIndex TO ViseProgram.nMaxIndex BY 1 DO
	IF aViseStatus[i].nInCNC = nCncUsed THEN
		CheckForUsedCNCByVise := i;
		RETURN;
	END_IF
END_FOR
CheckForUsedCNCByVise := 99;
RETURN;]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckForViseStatus" Id="{31452e63-93f6-4606-9dbb-d8bdccf66892}">
      <Declaration><![CDATA[METHOD INTERNAL CheckForViseStatus : BYTE
VAR_INPUT
	i_stViseState		:	E_Vise_State;
END_VAR
VAR
	i					:	BYTE;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
FOR i := ViseProgram.nStartIndex TO ViseProgram.nMaxIndex BY 1 DO
	IF aViseStatus[i].eState = i_stViseState THEN
		CheckForViseStatus := i;
		RETURN;
	END_IF
END_FOR
CheckForViseStatus := 99;
RETURN;]]></ST>
      </Implementation>
    </Method>
    <Action Name="CNC5Thread" Id="{52a289d7-6d43-443e-8c8e-7df069cd3e98}">
      <Implementation>
        <ST><![CDATA[	
(* =================================== Error handling ===================================*)
IF nStateCNC5 > 0 AND nStateCNC5 < 150000 THEN
	nStatePreviousCNC5 := nStateCNC5;
END_IF

(* =================================== Last states =================================== *)
IF(nStateCNC5 >= 1000) AND (nStateCNC5 < 150000) THEN
(*Steps before any state*)
	IF anLastStatesCNC5[0] <> nStateCNC5 THEN
		FOR iLastStatesCNC5 := 100 TO 1 BY -1 DO
			anLastStatesCNC5[iLastStatesCNC5]:= anLastStatesCNC5[iLastStatesCNC5-1];
		END_FOR
		anLastStatesCNC5[0]:= nStateCNC5;
	END_IF
END_IF	

	
CASE nStateCNC5 OF
				(*-----=== Alaphelyzet, startra várakozás ===-----*)
	0:
		sStateCNC5 := CONCAT(UDINT_TO_STRING(nStateCNC5) ,' - Idle');
		
	1000:
		nStateCNC5 := 13000;
	
	13000:		(*-----=== CNC ajtó zárása ===-----*)
		sStateCNC5 := CONCAT(UDINT_TO_STRING(nStateCNC5) ,' - A CNC ajtó zárása');
		stCNC5_Data^.DoorControl_CloseDoor := TRUE;
		IF stCNC5_Data^.DoorControl_DoorClosed THEN
			IF bStepEnableCNC5 THEN	
				stCNC5_Data^.DoorControl_CloseDoor := FALSE;
				nStateCNC5 := nStateCNC5 + 20;
			END_IF
		END_IF

	13020:		(*-----=== CNC előkészítése ===-----*)
		sStateCNC5 := CONCAT(UDINT_TO_STRING(nStateCNC5) ,' - A CNC előkészítése');
		IF TRUE THEN															// Külön FB-be rakni mert még képlékeny CAM file letöltése, ellenőrzése, felmásolása, betöltése, ........ 
			IF bStepEnableCNC5 THEN	
				nStateCNC5 := nStateCNC5 + 20;
			END_IF
		END_IF

	13040:		(*-----=== CAM program indítása ===-----*)
		sStateCNC5 := CONCAT(UDINT_TO_STRING(nStateCNC5) ,' - CAM program indítása');
		stCNC5_Data^.StartCNCProgram := TRUE;
		IF stCNC5_Data^.CurentState_Program = 'Running' THEN
			IF bStepEnableCNC5 THEN	
				stCNC5_Data^.StartCNCProgram := FALSE;
				nStateCNC5 := 13100;
			END_IF
		END_IF
		
	13100:		(*-----=== Várakozás CAM program végére ===-----*)
		sStateCNC5 := CONCAT(UDINT_TO_STRING(nStateCNC5) ,' - Várakozás CAM program végére');
		IF stCNC5_Data^.CurentState_Program = 'Finished' THEN
			IF bStepEnableCNC5 THEN	
				aViseStatus[nRackUsedForCNC5].eState := E_Vise_State.CncDone;
				stCNC5_Data^.DoorControl_CloseDoor := FALSE;
				nStateCNC5 := nStateCNC5 + 20;
			END_IF
		END_IF

	13120:		(*-----=== CNC folyamat befejezése ===-----*)
		sStateCNC5 := CONCAT(UDINT_TO_STRING(nStateCNC5) ,' - A CNC folyamat befejezése');
		IF TRUE THEN															// Külön FB-be rakni mert még képlékeny: minőségellenőrzés, mérési adatok, .... 
			IF bStepEnableCNC5 THEN	
				nStateCNC5 := nStateCNC5 + 20;
			END_IF
		END_IF

	13140:		(*-----=== CAM program leállítása ===-----*)
		sStateCNC5 := CONCAT(UDINT_TO_STRING(nStateCNC5) ,' - CAM program leállítása');
		stCNC5_Data^.CancelCNCProgram := TRUE;
		IF stCNC5_Data^.CurentState_Program = 'Idle' THEN
			IF bStepEnableCNC5 THEN	
				stCNC5_Data^.CancelCNCProgram := FALSE;
				nStateCNC5 := nStateCNC5 + 20;
			END_IF
		END_IF

	13160:		(*-----=== CNC ajtó nnyitása ===-----*)
		sStateCNC5 := CONCAT(UDINT_TO_STRING(nStateCNC5) ,' - A CNC ajtó nyitása');
		stCNC5_Data^.DoorControl_OpenDoor := TRUE;
		IF stCNC5_Data^.DoorControl_DoorOpened THEN
			IF bStepEnableCNC5 THEN	
				stCNC5_Data^.DoorControl_OpenDoor := FALSE;
				nStateCNC5 := 50000;
			END_IF
		END_IF
		
		
	50000:
		sStateCNC5 := CONCAT(UDINT_TO_STRING(nStateCNC5) ,' - Szülő program nyugtájára várakozás');
		
		
		
	150000: (* Maintenance *)
		sStateCNC5 := CONCAT(UDINT_TO_STRING(nStateCNC5) ,' - Maintenance');
		IF NOT bManualModeVise THEN
			nStateCNC5 := 0;
		END_IF
		
		
	200000:(* Error handling *)
		sStateCNC5 := CONCAT(UDINT_TO_STRING(nStateCNC5) ,CONCAT(' - Error, from this state: ' , sStateCNC5));
		nStateCNC5 := 200020;

	200020:(* Error handling *)
		IF bAckP THEN
			CASE nStatePreviousCNC5 OF
				0..149999: nStateCNC5 := 0;
			ELSE nStateCNC5 := 0;
			END_CASE
		END_IF	
		
	ELSE //Not a real step, for test purposes
		sStateCNC5 := CONCAT(UDINT_TO_STRING(nStateCNC5) ,' - Not a real step, for test purposes');
		
		
END_CASE]]></ST>
      </Implementation>
    </Action>
    <Action Name="MySQL" Id="{88254c98-7c76-40b1-aabd-0b61b65fd720}">
      <Implementation>
        <ST><![CDATA[fbGetNextVise(
	Target:= , 
	nRecordStartIndex:= , 
	tTimeout:= , 
	bExecute:= , 
	bBusy=> , 
	bError=> , 
	ipResult=> , 
	nViseNr=> );

fbUpdateVise(
	nRecordStartIndex:= , 
	tTimeout:= , 
	bExecute:= , 
	bBusy=> , 
	bError=> , 
	ipResult=> , 
	stParameterValues:= stParameterValues);]]></ST>
      </Implementation>
    </Action>
    <Action Name="Robot" Id="{300bd409-a385-474c-812b-4c295d30f6a6}">
      <Implementation>
        <ST><![CDATA[arRobotEvents[0] := TC_EVENTS.MyEvents.RobotNoPneumaticsErr;
arRobotEvents[1] := TC_EVENTS.MyEvents.RobotNotCorrectPrgErr;
arRobotEvents[2] := TC_EVENTS.MyEvents.RobotNotProdOnRobotErr;
arRobotEvents[3] := TC_EVENTS.MyEvents.RobotProdOnRobotErr;
arRobotEvents[4] := TC_EVENTS.MyEvents.RobotGripperOpenErr;
arRobotEvents[5] := TC_EVENTS.MyEvents.RobotGripperCloseErr;
arRobotEvents[6] := TC_EVENTS.MyEvents.RobotNotCorrectViseNumberErr;
arRobotEvents[7] := TC_EVENTS.MyEvents.RobotNotReadyErr;
arRobotEvents[8] := TC_EVENTS.MyEvents.RobotBasePosErr;

(*-----=== Hand shake jelek kezelése ===-----*)
fbRobot.bVise_1_7_Reset := 		fbRobot.bVise_1_7_Set AND_THEN CheckAllViseInSafePos();

fbRobot.bVise_8_14_Reset := 	fbRobot.bVise_8_14_Set AND_THEN CheckAllViseInSafePos();

fbRobot.bCNC_4_Reset := 		fbRobot.bCNC_4_Set;

fbRobot.bCNC_5_Reset := 		fbRobot.bCNC_5_Set AND
								stCNC5_Data^.DoorControl_DoorOpened AND
								(NOT stCNC5_Data^.DoorControl_Error) AND 
								stCNC5_Data^.ControlStatus_RobotModeActive
;

fbRobot(
	sName:= 'Fanuc - Satuzó', 
	bEn:= i_bLO2_CNC45, 
	timeBaseState:= T#40S, 
	bAck:= bAckP, 
	bOverride:= nOverride, 
	stEventArray:= arRobotEvents);]]></ST>
      </Implementation>
    </Action>
  </POU>
</TcPlcObject>