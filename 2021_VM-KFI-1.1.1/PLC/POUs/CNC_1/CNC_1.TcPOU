<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="CNC_1" Id="{067559b7-2cc8-4a74-b07e-41eb917a7856}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM CNC_1
VAR	(* Control *)
	nState						: UDINT;
	nStatePrevious				: UDINT;
	sState						: STRING(500);
	fbCycleTime					: TON;
	nCycleTime					: REAL;
	bError						: BOOL;
	stDutData					: ST_Dut_Data;
END_VAR
VAR (* LastStates *)
	anLastStates				: ARRAY[0..500] OF UDINT;
    iLastStates					: INT;
END_VAR
VAR (* Var IO *)
	{attribute 'TcLinkTo' := '		.fbMoveUpper.i_bBasePos	:= TIIB(13)^Channel 2^Input;
									.fbMoveUpper.i_bWorkPos	:= TIIB(13)^Channel 1^Input;
									.fbMoveUpper.q_bBasePos	:= TIIB(14)^Channel 2^Output;
									.fbMoveUpper.q_bWorkPos	:= TIIB(14)^Channel 1^Output;
									.fbMoveLower.i_bBasePos	:= TIIB(13)^Channel 4^Input;
									.fbMoveLower.i_bWorkPos	:= TIIB(13)^Channel 3^Input;
									.fbMoveLower.q_bBasePos	:= TIIB(14)^Channel 4^Output;
									.fbMoveLower.q_bWorkPos	:= TIIB(14)^Channel 3^Output;
									.fbLock.i_bBasePos	:= TIIB(13)^Channel 5^Input;
									.fbLock.i_bWorkPos	:= TIIB(13)^Channel 6^Input;
									.fbLock.q_bWorkPos	:= TIIB(14)^Channel 5^Output;
									.q_bToolCheckBlower := TIIB(14)^Channel 6^Output;
									.fbVisePos.arrRaw[0]	:= TIIB(10)^Module 1 (IOL_I_4byte)^TxPDO^input byte 0;	
									.fbVisePos.arrRaw[1] 	:= TIIB(10)^Module 1 (IOL_I_4byte)^TxPDO^input byte 1;
									.fbVisePos.arrRaw[2]	:= TIIB(10)^Module 1 (IOL_I_4byte)^TxPDO^input byte 2;
									.fbVisePos.arrRaw[3]	:= TIIB(10)^Module 1 (IOL_I_4byte)^TxPDO^input byte 3;
									.fbVisePos.nState		:= TIIB(10)^IO-Link DeviceState Inputs^Status of IO-Link Port 1;'}
	fbCncServoVise				: FB_CNC_Servo;	

END_VAR
VAR (* OPC_UA *)
	stCNC_Data					: POINTER TO OPC_CNC_Data_Collection;
	tHeartBeatDelay				: TON;
END_VAR

]]></Declaration>
    <Implementation>
      <ST><![CDATA[(* OPC_UA *)
stCNC_Data := ADR(OPC_UA_CNC1);
tHeartBeatDelay(IN := stCNC_Data^.HeartBeat = 99, PT := T#500MS, Q=>);
IF tHeartBeatDelay.Q THEN
	stCNC_Data^.HeartBeat := 0;
END_IF

(*Error handling*)
IF nState > 0 AND nState < 150000 THEN
	nStatePrevious := nState;
END_IF

(*Maintance*)
IF bManualMode THEN
	nState := 150000;
END_IF

(*Emergency*)
IF NOT i_bLO1_Main THEN
	nState := 0;
END_IF

(*Last states*)
IF(nState >= 1000) AND (nState < 150000) THEN
(*Steps before any state*)
	IF anLastStates[0] <> nState THEN
		FOR iLastStates:=500 TO 1 BY -1 DO
			anLastStates[iLastStates]:= anLastStates[iLastStates-1];
		END_FOR
		anLastStates[0]:= nState;
	END_IF
END_IF	

IF fbCncServoVise.bError OR stCNC_Data^.ControlStatus_Error
THEN
	bError  :=  TRUE;
END_IF


CASE nState OF
{region "Alaphelyzet felvétel"}
	(****************************************************************************************)
	(******************************* Alaphelyzetfelvétel ************************************)
	(****************************************************************************************)	
	0:		(*-----=== Kimenetek törlése ===-----*)
		sState := CONCAT(UDINT_TO_STRING(nState) ,' - A biztonsági kör nem aktív');
		IF i_bLO1_Main AND NOT bManualMode THEN		//AND i_bLO1_CNC1 THEN		Nincs bekötve! Teszteléshez kikapcsolva! Ha a bekötés kész VISSZAÍRNI !!!!!!!!!!!!!!!
			stCNC_Data^.DoorControl_CloseDoor := FALSE;
			stCNC_Data^.DoorControl_OpenDoor := FALSE;
			stCNC_Data^.MagazineTable_Trigger := FALSE;
			stCNC_Data^.ToolTable_Trigger := FALSE;
			stCNC_Data^.M401_Acknowledge := FALSE;
			stCNC_Data^.M402_Acknowledge := FALSE;
			stCNC_Data^.M403_Acknowledge := FALSE;
			stCNC_Data^.StartCNCProgram := FALSE;
			stCNC_Data^.StopCNCProgram := FALSE;
			stCNC_Data^.CancelCNCProgram := FALSE;
			stCNC_Data^.SelectCNCProgramByNodeID := FALSE;
			stCNC_Data^.SelectCNCPrograBlockNumber := FALSE;
//			stCNC_Data^.ToolTablePath := '';
			stCNC_Data^.ToolTableLoadTrigger := FALSE;
			stCNC_Data^.MagazineTableLoadTrigger := FALSE;
			stCNC_Data^.ProgramLoadTrigger := FALSE;
			IF bStepEnable THEN
				nState := nState + 20;
			END_IF
		END_IF

	20:		(*-----=== CNC ellenőrzés ===-----*)
		sState := CONCAT(UDINT_TO_STRING(nState) ,' - A CNC ellenőrzése');
		IF stCNC_Data^.ServerState = 'Running' AND
		   stCNC_Data^.CurrentState_State = 'NCIsAvailable' THEN
				IF		stCNC_Data^.CurentState_Program = 'Running' THEN
					nState := 140001;										// A megmunkálás folyamatban -> Várakozás megmunkálás végére. MÉG NINCS LÉPÉSSZÁM !!!!!!
				ELSIF	stCNC_Data^.CurentState_Program = 'Idle' OR stCNC_Data^.CurentState_Program = 'NotSelected' OR stCNC_Data^.CurentState_Program = 'Interrupted' THEN
					IF stDutData.nDutId > 0 AND stDutData.bDone THEN
						IF bStepEnable THEN									// Késztermék a satuban
							nState := 140001;
						END_IF
					ELSE
						IF bStepEnable THEN									// A satu üres
							nState := nState + 20;
						END_IF
					END_IF
				END_IF
		END_IF

	40:		(*-----=== CNC ajtó nnyitása ===-----*)
		sState := CONCAT(UDINT_TO_STRING(nState) ,' - A CNC ajtó nyitása');
		stCNC_Data^.DoorControl_OpenDoor := TRUE;
		IF stCNC_Data^.DoorControl_DoorOpened THEN
			IF bStepEnable THEN	
				stCNC_Data^.DoorControl_OpenDoor := FALSE;
				nState := nState + 20;
			END_IF
		END_IF

	60:
		nState := 10000;
{endregion}

{region "Alaphelyzet"}
	(****************************************************************************************)
	(*********************************** Alaphelyzet ****************************************)
	(****************************************************************************************)	
	10000:		(*-----=== Várakozás berakásra ===-----*)
		sState := CONCAT(UDINT_TO_STRING(nState) ,' - Várakozás alapanyagra');
		IF stDutData.nDutId > 0 THEN											// Alapanyag a robotnál
			IF bStepEnable THEN	
				nState := 11000;			// -> Alapanyag fogadása
			END_IF
		END_IF
{endregion}

{region "Alapanyag fogadása"}
	(****************************************************************************************)
	(******************************** Alapanyag fogadása ************************************)
	(****************************************************************************************)	
	11000:		(*-----=== Várakozás parancsra ===-----*)
		sState := CONCAT(UDINT_TO_STRING(nState) ,' - Satu pozícionálása');
		fbCncServoVise.eCommand := E_CncServoCommand.MovePos;
		IF fbCncServoVise.bDone THEN
			IF bStepEnable THEN
				fbCncServoVise.eCommand := E_CncServoCommand.NoCommand;
				nState := nState + 20;
			END_IF
		END_IF
{endregion}





	150000: (* Maintenance *)
		sState := CONCAT(UDINT_TO_STRING(nState) ,' - Maintenance');
		IF NOT bManualMode THEN
			nState := 0;
		END_IF
		
	200000:(* Error handling *)
		sState := CONCAT(UDINT_TO_STRING(nState) ,CONCAT(' - Error, from this state: ' , sState));
		nState := 200020;

	200020:(* Error handling *)
		IF bAckP THEN
			CASE nStatePrevious OF
				0..9999: nState := 0;
//				10000..25000: nState := 10000;
//				30000..31000: nState := 30000;
			ELSE nState := 0;
			END_CASE
		END_IF	
		
	ELSE //Not a real step, for test purposes
		sState := CONCAT(UDINT_TO_STRING(nState) ,' - Not a real step, for test purposes');
END_CASE

(*Timers***************************************************)
fbCycleTime(IN:= nState > 10000 AND nState <= 95000, PT:= T#1D, Q=> , ET=> );
IF nState > 10000 AND nState <= 95000 THEN
	nCycleTime := TIME_TO_REAL(fbCycleTime.ET)/1000;
END_IF

ServoVise();
//fbCncServoVise.bTestUp := i_bTest_Up;
//fbCncServoVise.bTestDown := i_bTest_Down;
//fbCncServoVise.bTestStop := i_bTest_Stop;
]]></ST>
    </Implementation>
    <Action Name="ServoVise" Id="{9fda3dba-8ece-4c49-ae6f-63cd1a546591}">
      <Implementation>
        <ST><![CDATA[fbCncServoVise(
	sName:= 'AWEA_1', 
	bErrorAck:= bAckP, 
	bEnable:= i_bLO1_Main,		//AND i_bLO1_CNC1 THEN		Nincs bekötve! Teszteléshez kikapcsolva! Ha a bekötés kész VISSZAÍRNI !!!!!!!!!!!!!!!, 
	bManualMode:= bManualMode, 
	bReady=> , 
	bBusy=> , 
	bDone=> , 
	bError=> );]]></ST>
      </Implementation>
    </Action>
  </POU>
</TcPlcObject>