<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_Router" Id="{6452ee2b-7606-43a4-87d8-c8d04384dc94}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_Router
VAR_INPUT
	bEnable					: BOOL;
	bErrorAck				: BOOL;
	bManualMode				: BOOL;
	bStepEnable				: BOOL;
	stTagData				: ST_Tag_Data;
	bPaletteStopperIn		: BOOL;
	bStopperReadyBase		: BOOL;
	bStopperReadyWork		: BOOL;
	nReqTarget				: UINT;
	nNextTarget				: UINT;
END_VAR
VAR_INPUT
	fbRouter				: POINTER TO FB_Bistabil;
	arrPaletteData			: POINTER TO ARRAY [0..200] OF ST_Dut_Data;
END_VAR
VAR_OUTPUT
	nTagID					: ULINT;
	bReady					: BOOL;
END_VAR
VAR	(* Control *)
	nState						: UDINT;
	nStatePrevious				: UDINT;
	sState						: STRING(500);
	fbCycleTime					: TON;
	nCycleTime					: REAL;
	bError						: BOOL;
	tRFID_Timeout				: TON;
	tPalette					: TON;
END_VAR
VAR CONSTANT
	iLastStatesMax				: INT := 500;
END_VAR
VAR (* LastStates *)
	anLastStates				: ARRAY[0..iLastStatesMax] OF UDINT;
    iLastStates					: INT;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[(*Error handling*)
IF nState > 0 AND nState < 150000 THEN
	nStatePrevious := nState;
END_IF

(*Maintance*)
IF bManualMode THEN
	nState := 150000;
END_IF

(*Emergency*)
IF NOT bEnable THEN
	nState := 0;
END_IF

(*Last states*)
IF(nState >= 1000) AND (nState < 150000) THEN
(*Steps before any state*)
	IF anLastStates[0] <> nState THEN
		FOR iLastStates:=iLastStatesMax TO 1 BY -1 DO
			anLastStates[iLastStates]:= anLastStates[iLastStates-1];
		END_FOR
		anLastStates[0]:= nState;
	END_IF
END_IF	

IF fbRouter^.bError
THEN
	bError  :=  TRUE;
END_IF

(* Set ready state *)
IF fbRouter^.bBasePosStab THEN
	bReady := bStopperReadyBase;
ELSIF fbRouter^.bWorkPosStab THEN
	bReady := bStopperReadyWork;
ELSE
	bReady := FALSE;
END_IF

CASE nState OF
{region "Alaphelyzet felvétel"}
	(****************************************************************************************)
	(******************************* Alaphelyzetfelvétel ************************************)
	(****************************************************************************************)	
	0:		(*-----=== Kimenetek törlése ===-----*)
		sState := CONCAT(UDINT_TO_STRING(nState) ,' - A biztonsági kör nem aktív');
		bError := FALSE;
		IF bEnable THEN
			IF bStepEnable THEN
				nState := nState + 20;
			END_IF
			;
		END_IF

	20:		(*-----=== Állapotok ellenőrzése ===-----*)
		sState := CONCAT(UDINT_TO_STRING(nState) ,' - Állapotok ellenőrzése');
		IF fbRouter^.i_bWorkPos THEN											// Lift lent és rőgzítő oldva -> Ki lehet adni az alaphelyzet vezérlést és kész
			IF bStepEnable THEN
				nState := 200;
			END_IF
		ELSE																	// Vagy fent van vagy félállapot NIMCS RÁ SZENZOR, hogy van-e nála paletta -> feltételezem, hogy van!
			IF bStepEnable THEN
				nState := 100;
			END_IF
		END_IF
	
	100:		(*-----=== Hengerek alaphelyzetbe ===-----*)
		sState := CONCAT(UDINT_TO_STRING(nState) ,' - Hengerek alaphelyzetbe');
		fbRouter^.bBasePosCmd := TRUE;
		fbRouter^.bWorkPosCmd := FALSE;
		IF fbRouter^.bBasePosStab THEN
			IF bStepEnable THEN
				nState := 10000;				// Alaphelyzetfelvétel kész
			END_IF
		END_IF

	200:		(*-----=== Hengerek munkahelyzetbe ===-----*)
		sState := CONCAT(UDINT_TO_STRING(nState) ,' - Hengerek alaphelyzetbe');
		fbRouter^.bBasePosCmd := FALSE;
		fbRouter^.bWorkPosCmd := TRUE;
		IF fbRouter^.bWorkPosStab THEN
			IF bStepEnable THEN
				nState := 13000;				// Megkezdett folyamat befejezése
			END_IF
		END_IF
{endregion}

{region "Alaphelyzet"}
	(****************************************************************************************)
	(*********************************** Alaphelyzet ****************************************)
	(****************************************************************************************)	
	10000:		(*-----=== Várakozás palettára ===-----*)
		sState := CONCAT(UDINT_TO_STRING(nState) ,' - Várakozás palettára');
		IF bPaletteStopperIn AND stTagData.Code > 0 THEN					// Paletta a stopperen
			IF bStepEnable THEN	
				nState := 11000;											// -> Alapanyag fogadása
			END_IF
		END_IF
{endregion}

{region "Alaphelyzet"}
	(****************************************************************************************)
	(*********************************** Paletta fogadása ***********************************)
	(****************************************************************************************)	
	11000:		(*-----=== RFID ellenőrzése ===-----*)
		sState := CONCAT(UDINT_TO_STRING(nState) ,' - RFID ellenőrzés');
		IF stTagData.Status <> E_TagStatus.NotPresent THEN
			IF stTagData.Code > 0 AND stTagData.Code <= 100 THEN
				IF bStepEnable THEN
					nTagID := stTagData.Code;						// -> Valid RFID adat	
					nState := nState + 20;	
				END_IF
			END_IF
		ELSIF tRFID_Timeout.Q THEN
			nState := 13000;										// -> RFID hiba -> tovább küldés
		ELSIF NOT bPaletteStopperIn THEN
			nState := 10000;										// -> Hibás Trigger -> alaphelyzet
		END_IF

	11020:		(*-----=== Paletta adat ellenőrzése ===-----*)
		sState := CONCAT(UDINT_TO_STRING(nState) ,' - Paletta adat ellenőrzés');
		IF arrPaletteData^[nTagID].nTarget =  nReqTarget THEN	
			IF bStepEnable THEN
				nTagID := stTagData.Code;						// Target eggyezik -> leválogatás 
				nState := nState + 20;	
			END_IF
		ELSE
			IF bStepEnable THEN	
				nState := 13000;								// Vagy nincs darab vagy kész -> mehet tovább
			END_IF
		END_IF

	11040:		(*-----=== Paletta adatok frissítése ===-----*)
		sState := CONCAT(UDINT_TO_STRING(nState) ,' - Paletta adatok frissítése');
		arrPaletteData^[nTagID].nTarget := nNextTarget;
		IF bStepEnable THEN
			nState := nState + 20;
		END_IF
	
	11060:		(*-----=== Terelő munkahelyzetbe ===-----*)
		sState := CONCAT(UDINT_TO_STRING(nState) ,' - Terelő munkahelyzetbe');
		fbRouter^.bBasePosCmd := FALSE;
		fbRouter^.bWorkPosCmd := TRUE;
		IF fbRouter^.bWorkPosStab THEN
			IF bStepEnable THEN
				nState := 12000;
			END_IF
		END_IF
{endregion}

{region "Paletta elengedés"}
	(****************************************************************************************)
	(********************** Várakozás paletta elengedésre ***********************************)
	(****************************************************************************************)	
	12000:		(*-----=== Várakozás megmunkálásra ===-----*)
		sState := CONCAT(UDINT_TO_STRING(nState) ,' - Várakozás paletta elengedésre');
		IF NOT bPaletteStopperIn THEN
			IF bStepEnable THEN	
				nState := 13000;
			END_IF
		END_IF
{endregion}

{region "Paletta elhaladás"}
	(****************************************************************************************)
	(*********************** Várakozás paletta elhaladására *********************************)
	(****************************************************************************************)	
	13000:		(*-----=== Paletta elengedése ===-----*)
		sState := CONCAT(UDINT_TO_STRING(nState) ,' - Paletta elengedése');
		IF tPalette.Q THEN
			IF bStepEnable THEN	
				nState := nState + 20;
			END_IF
		END_IF

	13020:		(*-----=== Terelő alaphelyzetbe ===-----*)
		sState := CONCAT(UDINT_TO_STRING(nState) ,' - Terelő alaphelyzetbe');
		fbRouter^.bBasePosCmd := TRUE;
		fbRouter^.bWorkPosCmd := FALSE;
		IF fbRouter^.bBasePosStab THEN
			IF bStepEnable THEN
				nState := 10000;
			END_IF
		END_IF
{endregion}

	150000: (* Maintenance *)
		sState := CONCAT(UDINT_TO_STRING(nState) ,' - Maintenance');
		IF NOT bManualMode THEN
			nState := 0;
		END_IF
		
	200000:(* Error handling *)
		sState := CONCAT(UDINT_TO_STRING(nState) ,CONCAT(' - Error, from this state: ' , sState));
		nState := 200020;

	200020:(* Error handling *)
		IF bAckP THEN
			CASE nStatePrevious OF
				0..9999: nState := 0;
//				10000..25000: nState := 10000;
//				30000..31000: nState := 30000;
			ELSE nState := 0;
			END_CASE
		END_IF	
		
	ELSE //Not a real step, for test purposes
		sState := CONCAT(UDINT_TO_STRING(nState) ,' - Not a real step, for test purposes');
END_CASE

(*Timers***************************************************)
fbCycleTime(IN:= nState > 10000 AND nState <= 95000, PT:= T#1D, Q=> , ET=> );
IF nState > 10000 AND nState <= 95000 THEN
	nCycleTime := TIME_TO_REAL(fbCycleTime.ET)/1000;
END_IF

tRFID_Timeout(IN:= bPaletteStopperIn AND (stTagData.Status = E_TagStatus.NotPresent), PT:= T#2s, Q=> , ET=> );
tPalette(IN:= nState = 13000, PT:= T#2S, Q=> , ET=> );
]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>